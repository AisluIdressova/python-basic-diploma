from telebot import types

from database.common.models import User, db
from site_API.core import site_api, url, headers, querystring
from database.core import crud
from tg_api.util.core import bot

import datetime


@bot.message_handler(commands=['start'])
def say_hello(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ü—Ä–∏–≤–µ—Çüëã'),
               types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True),
               types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True))
    bot.reply_to(message, f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}\n'
                          f'–ú–µ–Ω—è –∑–æ–≤—É—Ç - AirportCityFinderBot\n'
                          f'–Ø —É–º–µ—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤\n'
                          f'–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞</b>', parse_mode='html', reply_markup=markup)

    bot.register_next_step_handler(message, on_click)

def on_click(message):
    bot.reply_to(message, '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', reply_markup=types.ReplyKeyboardRemove())
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('–ù–∞–π—Ç–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≥–æ—Ä–æ–¥–æ–≤', callback_data='search'),
               types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤', callback_data='lookup'))
    bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'search')
def searching_airport(callback):
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                          text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=None)
    bot.reply_to(callback.message, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')


@bot.message_handler(func=lambda message: True)
def checker(message):
    check_api = site_api.get_info()
    result = check_api(url, headers, querystring, message.text)
    if not result:
        bot.reply_to(message,'–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    else:
        bot.reply_to(message, result)
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start')
    db_write = crud.create()
    now = datetime.datetime.now()
    current_time = now.strftime("%H-%M-%S  %d/%m/%Y")
    data = [{'message': message.text, 'date': current_time}]
    db_write(db, User, *data)


@bot.callback_query_handler(func=lambda call: call.data == 'lookup')
def retrieving_info(callback):
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                          text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=None)
    show_info = crud.retrieve()
    result = show_info(db, User)
    bot.reply_to(callback.message, result)



if __name__ == '__main__':
    bot.infinity_polling()
